1. What happens when you initialize a repository? Why do you need to do it?

It turns the current directory into a git repository, applying the git
version control to the folder.

2. How is the staging area different from the working directory and the 
repository? What value do you think it offers?

The staging area allows git to commit specific files and not necessarily the
entire working directory. It is a temporary place to hold files before they
are committed.

3. How can you use the staging area to make sure you have one commit per 
logical change?

I can use git status and diff to make sure everything I am about to commit
is exactly what I want to commit.

4. What are some situations when branches would be helpful in keeping your 
history organized? How would branches help?

They are logically separate versions of the project that exist separately,
so a stable version of the project is safe.

5. How do the diagrams help you visualize the branch structure?

To show clearly the parent of each commit and the relationship between 
branches.

6. What is the result of merging two branches together? Why do we 
represent it in the diagram the way we do?

It combines two branches into one branch. The resulting commit has two
parents: the heads of the two branches it merged.

7. What are the pros and cons of Git's automatic merging vs. always doing
merges manually?

Git's automatic merging is very efficient and easy. However, merge conflicts
require the authors to resolve differences in code that git couldn't handle.
